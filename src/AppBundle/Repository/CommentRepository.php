<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CommentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommentRepository extends EntityRepository
{
    public function getComments($parametersCollection)
    {
        $qb = $this->createQueryBuilder('c');
        $qb->select(' c.id, c.author_name, c.email, c.content,
                      c.depth, c.is_auto_comment, c.created_date, c.modified_date,
                      c.published_date,
                      cc.id as parent_id,
                      cs.id as comment_status_id, cs.name_es as comment_status_name,
                      cs.tree_slug as comment_status_tree_slug,
                      gp.id as generic_post_id, gp.title_es as generic_post_title,
                      u.user_name as created_name, uu.user_name as modifier_name')
            ->leftJoin('c.parent', 'cc')
            ->leftJoin('c.status', 'cs')
            ->leftJoin('c.generic_post', 'gp')
            ->leftJoin('c.created_author', 'u')
            ->leftJoin('c.modified_author', 'uu');

        $whereAdded = false;
        if(isset($parametersCollection['genericPostId']) && $parametersCollection['genericPostId'] != null){
            if(!$whereAdded){
                $whereAdded = true;
                $qb->where("gp.id = ".$parametersCollection['genericPostId']);
            }
            else{
                $qb->andWhere("gp.id = ".$parametersCollection['genericPostId']);
            }
        }

        if(isset($parametersCollection['getOnlyPendings']) && $parametersCollection['getOnlyPendings'] == true){
            if(!$whereAdded){
                $whereAdded = true;
                $qb->where("cs.id = ".$parametersCollection['commentStatusPendingId']);
            }
            else{
                $qb->andWhere("cs.id = ".$parametersCollection['commentStatusPendingId']);
            }
        }
        else{
            if(isset($parametersCollection['getOnlyApproved']) && $parametersCollection['getOnlyApproved'] == true){
                if(!$whereAdded){
                    $whereAdded = true;
                    $qb->where("cs.id = ".$parametersCollection['commentStatusApprovedId']);
                }
                else{
                    $qb->andWhere("cs.id = ".$parametersCollection['commentStatusApprovedId']);
                }
            }

            if(!isset($parametersCollection['searchByParent']) || $parametersCollection['searchByParent'] != true){
                if($parametersCollection['treeView'] == true){
                    if(!$whereAdded){
                        $whereAdded = true;
                        $qb->where("c.parent IS NULL ");
                    }
                    else{
                        $qb->andWhere("c.parent IS NULL ");
                    }
                }

            }
            else{
                if(!$whereAdded){
                    $whereAdded = true;
                    $qb->where("cc.id = ".$parametersCollection['parentId']);
                }
                else{
                    $qb->andWhere("cc.id = ".$parametersCollection['parentId']);
                }
            }
        }

        if(isset($parametersCollection['filterDate']) && $parametersCollection['filterDate'] != null){
            $filterDateStartTime = $parametersCollection['filterDate']." 00:00:00";
            $filterDateEndTime = $parametersCollection['filterDate']." 23:59:59";
            if(!$whereAdded){
                $whereAdded = true;
                $qb->where("c.created_date >= '".$filterDateStartTime."'  ");
                $qb->andWhere("c.created_date <= '".$filterDateEndTime."'  ");
            }
            else{
                $qb->andWhere("c.created_date >= '".$filterDateStartTime."'  ");
                $qb->andWhere("c.created_date <= '".$filterDateEndTime."'  ");
            }
        }

        $qb->orderBy('c.created_date','ASC');
        return $qb->getQuery()->getArrayResult();
    }

    public function deleteByIdsCollection($idsCollection)
    {
        $em = $this->getEntityManager();
        $queryText = "DELETE FROM AppBundle:Comment com
                      WHERE com.id IN (".$idsCollection.")";
        $query = $em->createQuery($queryText);
        $query->execute();
    }
}
