<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * NomenclatureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NomenclatureRepository extends EntityRepository
{
    public function getNomenclatures($parametersCollection)
    {
        $qb = $this->createQueryBuilder('n');
        $qb->select('n.id, n.name_es, n.url_slug_es, n.tree_slug, n.created_date,
                     n.priority, u.full_name, u.user_name, nt.id as nomenclature_type_id,
                     nt.name_es as nomenclature_type_name, np.id as parent_id,
                     np.name_es as parent_name')
            ->innerJoin('n.nom_type', 'nt')
            ->leftJoin('n.created_author', 'u')
            ->leftJoin('n.parent', 'np');

        $whereAdded = 0;
        /*filtering by TREE_SLUG*/
        if($parametersCollection->filterByTreeSlug && $parametersCollection->treeSlug != null){
            if(!$whereAdded){
                $qb->where("n.tree_slug LIKE '%".$parametersCollection->treeSlug."%' ");
            }
            else{
                $qb->andWhere("n.tree_slug LIKE '%".$parametersCollection->treeSlug."%' ");
            }
        }
        /*filtering by PARENT*/
        if(isset($parametersCollection->filterByParent) && $parametersCollection->filterByParent == true &&
            $parametersCollection->parent != null){
            if(!$whereAdded){
                $qb->where("n.parent = ".$parametersCollection->parent);
            }
            else{
                $qb->andWhere("n.parent = ".$parametersCollection->parent);
            }
        }
        /*conditioning the ORDER_BY*/
        if(isset($parametersCollection->filterOrderBy) &&  $parametersCollection->filterOrderBy == true &&
            $parametersCollection->orderBy != null){
            $qb->orderBy('n.'.$parametersCollection->orderBy,'DESC');
        }
        else{
            $qb->orderBy('n.created_date','DESC');
        }

        /*conditioning the RESULT*/
        $nomenclaturesCollection = array();
        if(isset($parametersCollection->getByObject) && $parametersCollection->getByObject == true){
            $nomenclaturesCollection = $qb->getQuery()->getResult();
        }
        else{
            $nomenclaturesCollection = $qb->getQuery()->getArrayResult();
        }
        return $nomenclaturesCollection;
    }

    public function getActionsByParent($parent)
    {
        $qb = $this->createQueryBuilder('n');
        $qb->select("n")
            ->where("n.tree_slug LIKE '%action%'")
            ->andWhere("n.parent = ".$parent)
            ->orderBy("n.created_date","DESC");

        return  $qb->getQuery()->getArrayResult();
    }
}
