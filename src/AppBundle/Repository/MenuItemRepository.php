<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MenuItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MenuItemRepository extends EntityRepository
{
    public function getMenuItems($parametersCollection)
    {
        $qb = $this->createQueryBuilder('mi');
        $qb->select('mi.id, mi.name_es, mi.url_slug_es, mi.tree_slug, mi.depth, mi.priority, mi.description_es,
                     mi.created_date, u.full_name as author_full_name, u.user_name as author_user_name,
                     m.id as menu_id, n.id as menu_item_type_id, n.name_es as menu_item_type_name,
                     n.tree_slug as menu_item_type_tree_slug,
                     mip.id as parent_id')
            ->innerJoin('mi.item_type', 'n')
            ->innerJoin('mi.menu', 'm')
            ->leftJoin('mi.created_author', 'u')
            ->leftJoin('mi.parent', 'mip');

        $whereAdded = false;
        if(isset($parametersCollection['menuId']) && $parametersCollection['menuId'] != null){
            if(!$whereAdded)
            {
                $whereAdded = true;
                $qb->where("m.id = '".$parametersCollection['menuId']."'");
            }
            else{
                $qb->andWhere("m.id = '".$parametersCollection['menuId']."'");
            }
        }

        if(isset($parametersCollection['searchByParent'])){
            if(!$whereAdded){
                $whereAdded = true;
                if($parametersCollection['parentId'] == null){
                    $qb->where("mi.parent IS NULL");
                }
                else{
                    $qb->where("mip.id = '".$parametersCollection['parentId']."'");
                }
            }
            else{
                if($parametersCollection['parentId'] == null){
                    $qb->andWhere("mi.parent IS NULL");
                }
                else{
                    $qb->andWhere("mip.id = '".$parametersCollection['parentId']."'");
                }
            }
        }

        $qb->orderBy('mi.priority','ASC');
        return $qb->getQuery()->getArrayResult();
    }

    public function deleteByIdsCollection($idsCollection)
    {
        $em = $this->getEntityManager();
        $queryText = "DELETE FROM AppBundle:MenuItem mi
                      WHERE mi.id IN (".$idsCollection.")";
        $query = $em->createQuery($queryText);
        $query->execute();
    }
}
