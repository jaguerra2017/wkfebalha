<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * GalleryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GalleryRepository extends EntityRepository
{
    public function getGalleries($parametersCollection)
    {
        $qb = $this->createQueryBuilder('g');
        $qb->select('g.id, g.name_es,g.description_es, g.created_date, g.modified_date,
                     u.user_name as author_user_name, uu.user_name as modifier_user_name,
                     n.id as gallery_type_id, n.name_es as gallery_type_name,
                     n.tree_slug as gallery_type_tree_slug')
            ->innerJoin('g.gallery_type', 'n')
            ->leftJoin('g.created_author', 'u')
            ->leftJoin('g.modified_author', 'uu');

        $whereAdded = false;
        if(isset($parametersCollection['generalSearchValue'])){
            if(!$whereAdded){
                $whereAdded = true;
                $qb->where("g.name_es LIKE '%".$parametersCollection['generalSearchValue']."%' ");
            }
            else{
                $qb->andWhere("g.name_es LIKE '%".$parametersCollection['generalSearchValue']."%' ");
            }
        }
        if(isset($parametersCollection['searchByIdsCollection']) && $parametersCollection['searchByIdsCollection'] == true
            && isset($parametersCollection['idsCollection'])){
            if(!$whereAdded){
                $whereAdded = true;
                $qb->where("g.id IN (".$parametersCollection['idsCollection'].") ");
            }
            else{
                $qb->andWhere("g.id IN (".$parametersCollection['idsCollection'].") ");
            }
        }

        $qb->orderBy('g.created_date','DESC');
        return $qb->getQuery()->getArrayResult();
    }

    public function deleteByIdsCollection($idsCollection)
    {
        $em = $this->getEntityManager();
        $queryText = "DELETE FROM AppBundle:Gallery g
                      WHERE g.id IN (".$idsCollection.")";
        $query = $em->createQuery($queryText);
        $query->execute();
    }
}
