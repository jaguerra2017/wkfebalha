<?php

namespace AppBundle\Repository;

/**
 * ShowSeatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShowSeatRepository extends \Doctrine\ORM\EntityRepository
{
  /**
   * @return array
   * @author Jesus Ariel
   * returns the id of avaiable seats in a show
   */
  public function getAvaiableSeatsInShow($params)
  {
    $em = $this->getEntityManager();
    $stmt = $em
      ->getConnection()
      ->prepare("select s.seat_id from show_seat s
        INNER JOIN tb_show sh ON sh.generic_post_id = s.show_id AND sh.generic_post_id = {$params['showid']}
        INNER JOIN nomenclature n ON s.status_id = n.id AND n.tree_slug = 'avaiable'
        WHERE s.avaiable = TRUE");
    $stmt->execute();
    $result = $stmt->fetchAll(7);
    return $result;
  }
  public function deleteDisableSeats($params) {
    $qb = $this->getEntityManager()->createQueryBuilder();
    $qb->delete('AppBundle:ShowSeat','s')
//      ->set('s.available', $params['value'])
//      ->set('s.status', $status->getId())
      ->where('s.show = :showid')
      ->setParameter('showid',$params['showid']);
    if( $params['value']){
      $qb->andWhere($qb->expr()->in('s.seat', $params['selectedSeats']));
    }
    else{
      $qb->andWhere($qb->expr()->in('s.seat', $params['unselectedSeats']));
    }

    $qb->getQuery()->setQueryCacheLifetime(3600);
    $qb->getQuery()->setResultCacheLifetime(3600);
    $qb->getQuery()->useQueryCache(true);
    return $qb->getQuery()->getResult(2);
  }

  public function getAvailabilityInfo($params){
    $qb = $this->getEntityManager()->createQueryBuilder();
    $select = "COUNT(s.id) as available_seats";
    $qb->select($select)
      ->from('AppBundle:ShowSeat','s')
      ->innerJoin('s.show','sh')
      ->where('sh.id = :showid')
      ->setParameter('showid',$params['showid']);
    $qb->getQuery()->setQueryCacheLifetime(3600);
    $qb->getQuery()->setResultCacheLifetime(3600);
    $qb->getQuery()->useQueryCache(true);
    return $qb->getQuery()->getSingleScalarResult();
  }

}
